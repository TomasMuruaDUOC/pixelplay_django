-- estructura_pixelplay.sql
-- Script DDL para crear la estructura de la base de datos PixelPlay
-- Fecha: 21/04/2025
-- Autor: Estudiante PixelPlay

-- Eliminar tablas si existen (en orden inverso a las relaciones de clave foránea)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE CARRITO_COMPRAS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE JUEGOS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE USUARIOS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Crear tabla USUARIOS
CREATE TABLE USUARIOS (
    id NUMBER PRIMARY KEY,
    password VARCHAR2(128) NOT NULL,
    last_login TIMESTAMP NULL,
    is_superuser NUMBER(1) DEFAULT 0 NOT NULL,
    username VARCHAR2(150) UNIQUE NOT NULL,
    first_name VARCHAR2(150) NOT NULL,
    last_name VARCHAR2(150) DEFAULT '' NOT NULL,
    email VARCHAR2(254) UNIQUE NOT NULL,
    is_staff NUMBER(1) DEFAULT 0 NOT NULL,
    is_active NUMBER(1) DEFAULT 1 NOT NULL,
    date_joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    rol VARCHAR2(20) DEFAULT 'cliente' NOT NULL,
    fecha_nacimiento DATE NULL,
    direccion VARCHAR2(255) NULL,
    CONSTRAINT chk_rol CHECK (rol IN ('admin', 'cliente'))
);

-- Crear tabla JUEGOS
CREATE TABLE JUEGOS (
    id NUMBER PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(2000) NOT NULL,
    precio NUMBER(10,2) NOT NULL,
    stock NUMBER DEFAULT 0 NOT NULL,
    categoria VARCHAR2(30) NOT NULL,
    imagen VARCHAR2(255) NULL,
    fecha_lanzamiento DATE NULL,
    CONSTRAINT chk_precio CHECK (precio >= 0),
    CONSTRAINT chk_stock CHECK (stock >= 0),
    CONSTRAINT chk_categoria CHECK (categoria IN ('accion', 'aventura', 'retro', 'estrategia', 'deportes'))
);

-- Crear tabla CARRITO_COMPRAS
CREATE TABLE CARRITO_COMPRAS (
    id NUMBER PRIMARY KEY,
    usuario_id NUMBER NOT NULL,
    juego_id NUMBER NOT NULL,
    cantidad NUMBER DEFAULT 1 NOT NULL,
    fecha_agregado TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_carrito_usuario FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id) ON DELETE CASCADE,
    CONSTRAINT fk_carrito_juego FOREIGN KEY (juego_id) REFERENCES JUEGOS(id) ON DELETE CASCADE,
    CONSTRAINT chk_cantidad CHECK (cantidad > 0)
);

-- Crear secuencias para los IDs
CREATE SEQUENCE SEQ_USUARIOS_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_JUEGOS_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_CARRITO_ID START WITH 1 INCREMENT BY 1;

-- Crear índices para optimizar consultas
CREATE INDEX IDX_USUARIOS_USERNAME ON USUARIOS(username);
CREATE INDEX IDX_USUARIOS_EMAIL ON USUARIOS(email);
CREATE INDEX IDX_USUARIOS_ROL ON USUARIOS(rol);

CREATE INDEX IDX_JUEGOS_CATEGORIA ON JUEGOS(categoria);
CREATE INDEX IDX_JUEGOS_PRECIO ON JUEGOS(precio);

CREATE INDEX IDX_CARRITO_USUARIO ON CARRITO_COMPRAS(usuario_id);
CREATE INDEX IDX_CARRITO_JUEGO ON CARRITO_COMPRAS(juego_id);

-- Crear triggers para asignar IDs automáticamente
CREATE OR REPLACE TRIGGER TRG_USUARIOS_ID
BEFORE INSERT ON USUARIOS
FOR EACH ROW
BEGIN
    SELECT SEQ_USUARIOS_ID.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_JUEGOS_ID
BEFORE INSERT ON JUEGOS
FOR EACH ROW
BEGIN
    SELECT SEQ_JUEGOS_ID.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_CARRITO_ID
BEFORE INSERT ON CARRITO_COMPRAS
FOR EACH ROW
BEGIN
    SELECT SEQ_CARRITO_ID.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/

COMMIT;
